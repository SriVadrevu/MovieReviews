Takes a postfix expression, converts to infix and pre-fix utilizing binary 
trees that store characters.  Then sovles the postfix expression by using
recursive functions.

Prompt: "Expression Tree Creation, Evaluation, and Displaying
 
Step 1: Create code that will read in a valid postfix expression consisting of 
integer values 1, -5, -34, 13, -3,  ...
operators % (modulus), / (division), & (bitwise AND), ^ (bitwise XOR), + (addition), - (subtraction)
and create a valid expression tree for the postfix expression
 
Step 2: Write a function that will evaluate the expression and return the value of the resulting expression
 
Step 3: Write recursive functions that will print the expression tree as (ignoring parenthesis)
infix
postfix
prefix"

Concepts Used:
Recursive Functions
Binary Search Trees (Linked Lists)
